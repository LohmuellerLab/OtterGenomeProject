compareObs
require(ggplot2)
compareObs <- ggplot(bothobs,aes(x=bin,y=avgR2,color=label))+
geom_point()+
ggtitle("Comparing OBS using Haplotypes or Genotypes")
compareObs
compareObs <- ggplot(bothobs,aes(x=bin,y=avgR2,color=label))+
geom_point()+
ggtitle("Comparing OBS using Haplotypes or Genotypes")+
theme_bw()
compareObs
allCEUld <- rbind(ceu_obs_1000g_avg,g1000_ceu_ld_new_avg,gutenkunst.ceu_avg,trim.ceu_avg,msmc_ceu_4_avg,smcpp.ceu_avg)
gutenkunst.ceu_ld <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDdecay/gutenkunst.ceu.ALL.LD.BINNED.OUTPUT.txt")
colnames(gutenkunst.ceu_ld) <- c("binStart","binStop","sumR2","sumSNPs")
dim(gutenkunst.ceu_ld)
gutenkunst.ceu_ld$label <- "2. Gutenkunst"
gutenkunst.ceu_ld$binLabel <- rep(bins,200)
## aggregate:
gutenkunst.ceu_R2sums_SNPsums_allBins <- aggregate(gutenkunst.ceu_ld[,3:4],by=list(factor(gutenkunst.ceu_ld$binLabel)),sum)
head(gutenkunst.ceu_R2sums_SNPsums_allBins)
gutenkunst.ceu_avg <- data.frame(gutenkunst.ceu_R2sums_SNPsums_allBins[,1])
gutenkunst.ceu_avg$mean <- gutenkunst.ceu_R2sums_SNPsums_allBins$sumR2/gutenkunst.ceu_R2sums_SNPsums_allBins$sumSNPs
colnames(gutenkunst.ceu_avg) <- c("bin","avgR2")
head(gutenkunst.ceu_avg)
gutenkunst.ceu_avg$label <- "2. Gutenkunst "
dim(gutenkunst.ceu_avg)
head(gutenkunst.ceu_avg)
msmc_ceu_TRIM_ld <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDdecay/msmc.TRIMMEDceu_2.Na5.ALL.LD.BINNED.OUTPUT.txt")
colnames(msmc_ceu_TRIM_ld) <- c("binStart","binStop","sumR2","sumSNPs")
dim(msmc_ceu_TRIM_ld)
msmc_ceu_TRIM_ld$label <- "3b. CEU 2-Hap Trim"
msmc_ceu_TRIM_ld$binLabel <- rep(bins,200)
## aggregate:
trim.ceu_R2sums_SNPsums_allBins <- aggregate(msmc_ceu_TRIM_ld[,3:4],by=list(factor(msmc_ceu_TRIM_ld$binLabel)),sum)
head(trim.ceu_R2sums_SNPsums_allBins)
trim.ceu_avg <- data.frame(trim.ceu_R2sums_SNPsums_allBins[,1])
trim.ceu_avg$mean <- trim.ceu_R2sums_SNPsums_allBins$sumR2/trim.ceu_R2sums_SNPsums_allBins$sumSNPs
colnames(trim.ceu_avg) <- c("bin","avgR2")
head(trim.ceu_avg)
trim.ceu_avg$label <- "3b. CEU 2-Hap Trim "
########### msmc 4 ceu ########
# :: note!! This was only 10 replicates of 10Mb 'chromosomes' bc files were sooo large
msmc_ceu_4_ld <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDdecay/msmc.ceu_4.ALL.LD.BINNED.OUTPUT.txt")
colnames(msmc_ceu_4_ld) <- c("binStart","binStop","sumR2","sumSNPs")
dim(msmc_ceu_4_ld)
head(msmc_ceu_4_ld)
msmc_ceu_4_ld$label <- "4. MSMC 4-Hap"
msmc_ceu_4_ld$binLabel <- rep(bins,10) ## only 10 bc was a smaller # of reps (10 not 200 bc big files)
msmc_ceu_4_R2sums_SNPsums_allBins <- aggregate(msmc_ceu_4_ld[,3:4],by=list(factor(msmc_ceu_4_ld$binLabel)),sum)
head(msmc_ceu_4_R2sums_SNPsums_allBins)
msmc_ceu_4_avg <- data.frame(msmc_ceu_4_R2sums_SNPsums_allBins[,1])
msmc_ceu_4_avg$mean <- msmc_ceu_4_R2sums_SNPsums_allBins$sumR2/msmc_ceu_4_R2sums_SNPsums_allBins$sumSNPs
colnames(msmc_ceu_4_avg) <- c("bin","avgR2")
head(msmc_ceu_4_avg)
msmc_ceu_4_avg$label <- "4. MSMC 4-Hap "
smcpp.ceu_ld <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDdecay/smcpp.ceu.ALL.LD.BINNED.OUTPUT.txt")
colnames(smcpp.ceu_ld) <- c("binStart","binStop","sumR2","sumSNPs")
dim(smcpp.ceu_ld)
smcpp.ceu_ld$label <- "6. SMC++ "
smcpp.ceu_ld$binLabel <- rep(bins,200)
smcpp.ceu_R2sums_SNPsums_allBins <- aggregate(smcpp.ceu_ld[,3:4],by=list(factor(smcpp.ceu_ld$binLabel)),sum)
head(smcpp.ceu_R2sums_SNPsums_allBins)
smcpp.ceu_avg <- data.frame(smcpp.ceu_R2sums_SNPsums_allBins[,1])
smcpp.ceu_avg$mean <- smcpp.ceu_R2sums_SNPsums_allBins$sumR2/smcpp.ceu_R2sums_SNPsums_allBins$sumSNPs
colnames(smcpp.ceu_avg) <- c("bin","avgR2")
head(smcpp.ceu_avg)
smcpp.ceu_avg$label <- "6. SMC++ "
allCEUld <- rbind(ceu_obs_1000g_avg,g1000_ceu_ld_new_avg,gutenkunst.ceu_avg,trim.ceu_avg,msmc_ceu_4_avg,smcpp.ceu_avg)
dim(allCEUld) # 700 3
head(allCEUld)
dim(allCEUld)
## want all CEU together
##################### PLOT CEU ################
obs = "#999999"
emp1000g="#000000"
gut = "#984EA3"
hap2 = c("#E31A1C","#FB9A99")
hap4 = c("#33A02C","#B2DF8A")
hap8 = c("#1F78B4","#A6CEE3")
smcPlus = c("#FF7F00","#FDBF6F")
# want to get mean across bins
##################### DEBUGGING #########################
#######################################################
require(ggplot2)
ceuPLot <- ggplot(allCEUld,aes(x=factor(as.integer(bin)),y=avgR2,color=label))+
geom_point()+
xlab("distance between SNPs ")+
ylab("average r\u00B2")+
theme_bw()+
ggtitle("CEU LD DECAY")+
scale_color_manual(values=c(emp1000g,gut,hap2,hap4[1],hap8[1],smcPlus))+
scale_x_discrete(breaks=seq(0,100,by=10),labels=c("0kb","10kb","20kb","30kb","40kb","50kb","60kb","70kb","80kb","90kb","100kb"))
ceuPLot
ceu_obs_in <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewTanyaresults_genor2_mac2/CEU_autosomes_LD_geno.txt")
dim(ceu_obs_in)
head(ceu_obs_in)
colnames(ceu_obs_in) <- c("binStart","binStop","avgR2")
head(ceu_obs_1000g_avg)
head(g1000_ceu_ld)
colnames(ceu_obs_in) <- c("binStart","binStop","avgR2")
ceu_obs_avg <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewTanyaresults_genor2_mac2/CEU_autosomes_LD_geno.txt")
dim(ceu_obs_in) # 100 3
head(ceu_obs_in)
colnames(ceu_obs_in) <- c("binStart","binStop","avgR2")
ceu_obs_avg <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewTanyaresults_genor2_mac2/CEU_autosomes_LD_geno.txt")
dim(ceu_obs_avg) # 100 3
head(ceu_obs_avg)
colnames(ceu_obs_avg) <- c("binStart","binStop","avgR2")
ceu_gut_in <- read.table("Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewSimResults_round2_genor2_mac2_spotchecked/gutenkunst.ceu.ALL.LD.BINNED.OUTPUT.20170211.txt")
ceu_gut_in <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewSimResults_round2_genor2_mac2_spotchecked/gutenkunst.ceu.ALL.LD.BINNED.OUTPUT.20170211.txt")
dim(ceu_gut_in) # 2000000
head(ceu_gut_in)
colnames(ceu_gut_in) <- c("binStart","binStop","sumR2","sumPairs")
head(ceu_gut_in)
head(ceu_gut_in)
ls
head(ceu_gut_in)
ceu_gut_in <- read.table("/Users/annabelbeichman/Documents/UCLA/PSMC_Project/1000GenomesData/LDDecay_NEWgenor2Results_round2_20170211/NewSimResults_round2_genor2_mac2_spotchecked/gutenkunst.ceu.ALL.LD.BINNED.OUTPUT.20170211.txt")
head(ceu_gut_in)
install.packages('igraph', repos='http://cran.us.r-project.org')
R.Version()
R.version()
R.Version()
install.packages("igraph")
library(ggplot2)
install.packages("igraph")
setwd("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp")
portho <- read.table("15spp_POrtho_LongestIsosSelected_pruneTree_20170601/myproject.fixedHeader.poff",header=T,na.strings = c("*",","),stringsAsFactors = F)
head(portho)
head(portho,n=500)
### 1. replace any entries with commas with NA:
portho_noCommas <- as.data.frame(sapply(portho,gsub,pattern=".*,.*",replacement=NA))
head(portho_noCommas,n=400)
### 2. Can't be NA in *both* elut and pbra (have to have at least one present)
portho_EP <- portho_noCommas[!is.na(portho_noCommas$elut.faa) | !is.na(portho_noCommas$pbra.faa),]
dim(portho_EP)
dim(portho)
dim(portho_noCommas)
### 3. Now want some limit on how many total species there should be. Going to set it to that there must be 8 (1 of which is elut or pbra; 1 of which is HSAP, gene must be known in human OR dog-- most characterized genomes, gives me a reliable ENSG ID, and if it isn't in human I find it's an uncharacterized protein). Need to recount now that I've gotten rid of commas. There are only 86 genes that are in at least 8 spp, but not in human or dog -- I guess this will work? make a column of TName
portho_EP$na_count <- apply(is.na(portho_EP), 1, sum)
head(portho_EP)
portho_EP$remainingSpp <- 15-portho_EP$na_count
head(portho_EP)
plot(hist(portho_EP$remainingSpp))
sum(portho_EP$remainingSpp >=8)
## must have human AND/OR dog:
portho_EPHC <- portho_EP[!is.na(portho_EP$hsap.faa) | !is.na(portho_EP$cfam.faa),]
dim(portho_EPHC) # 15992
# lucky number 8?
portho_EP_8 <- portho_EPHC[portho_EPHC$remainingSpp >=8,]
dim(portho_EP_8) # 15318 genes! (# lost 86 genes that arent in cfam OR hsap)
sum(is.na(portho_EP_8$cfam.faa))
sum(is.na(portho_EP_8$hsap.faa)) # 593
sum(is.na(portho_EP$hsap.faa)) # 6038
sum(is.na(portho_EP_8$elut.faa))
sum(is.na(portho_EP_8$pbra.faa))
sum(is.na(portho_EP_8$mfur.faa))
##
# remember, after guidance you can drop more sequences that mess stuff up too.
### 4. need to pick a name for each cluster: ooh! what about gene symbol!!!! YES. yes. yes? are they all unique? hm. I think I want there to be a representative in at least one good ref genome (human or dog)... because what even are the others? most of the others are 'novel' but arent in any pathways, dont have UIDs. Exclude. Going to use human and dog.
head(portho_EP_8)
# first want to name them based on human, then on dog.
portho_EP_8$PName <- as.character(portho_EP_8$hsap.faa)
sum(is.na(portho_EP_8$PName)) # 715
portho_EP_8$PName[is.na(portho_EP_8$PName)] <- as.character(portho_EP_8$cfam.faa[is.na(portho_EP_8$PName)])
# only 86 genes that aren't in human OR dog. what are those genes
######## this is a mess. redo this based on the polysel input script try to get UID
# gene2ensembl <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/CompGenomicsScripts/newPostCodemlAnalysis_DaubExcoffier_20170525/polysel/inputFormatting/20170525/gene2ensembl",comment.char = "",header=T)
# gene2ensembl$Ensembl_protein_identifier.No1 <- gsub("\\.[0-9]+$","",gene2ensembl$Ensembl_protein_identifier)
# human_dog_ncbi_uids <- merge(gene2ensembl,portho_EP_8,by.x="Ensembl_protein_identifier")
#
# # try using gene ID as well
# hsapt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/hsap.lookuptable.txt")
# colnames(hsapt) <- c("Protein","Gene","Transcript")
# hsapt$Protein.No1 <- gsub("\\.[0-9]+$","",hsapt$Protein)
# head(hsapt)
# portho_EP_8_hsapInfo <- merge(portho_EP_8,hsapt,by.x="hsap.faa",by.y="Protein.No1")
# head(portho_EP_8_hsapInfo)
#
# sum(portho_EP_8_hsapInfo$Protein %in% gene2ensembl$Ensembl_protein_identifier) # 13655
# sum(portho_EP_8_hsapInfo$hsap.faa %in% gene2ensembl$Ensembl_protein_identifier.No1) # 13663 so missing a few...
############# PICK UP FROM STEP 1 from other pipeline (need look up tables, and other stuff. )############
# need Transcript names to be able to pull out transcript sequences! that's why.
###########**you are here ** ###########
sppNum=15
#######  lookup tables: these give protein name: gene name : transcript ########
amelt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/amel.lookuptable.txt",stringsAsFactors = F)
colnames(amelt) <- c("Protein","Gene","Transcript")
# want an extra column that gives protein name without the .1 after each name (so it matches what I gave to portho)
amelt$ProteinNo.1 <- gsub("\\.[0-9]","",amelt$Protein)
head(amelt)
btaut <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/btau.lookuptable.txt",stringsAsFactors = F)
colnames(btaut) <- c("Protein","Gene","Transcript")
btaut$ProteinNo.1 <- gsub("\\.[0-9]","",btaut$Protein)
cfamt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/cfam.lookuptable.txt",stringsAsFactors = F)
colnames(cfamt) <- c("Protein","Gene","Transcript")
cfamt$ProteinNo.1 <- gsub("\\.[0-9]","",cfamt$Protein)
ecabt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/ecab.lookuptable.txt",stringsAsFactors = F)
colnames(ecabt) <- c("Protein","Gene","Transcript")
ecabt$ProteinNo.1 <- gsub("\\.[0-9]","",ecabt$Protein)
fcatt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/fcat.lookuptable.txt",stringsAsFactors = F)
colnames(fcatt) <- c("Protein","Gene","Transcript")
fcatt$ProteinNo.1 <- gsub("\\.[0-9]","",fcatt$Protein)
hsapt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/hsap.lookuptable.txt",stringsAsFactors = F)
colnames(hsapt) <- c("Protein","Gene","Transcript")
hsapt$ProteinNo.1 <- gsub("\\.[0-9]","",hsapt$Protein)
mfurt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/Homologs_CDS_GFF_ALLSPP_Oct26_2016/CDS_GFF_fromEnsembl_forPORTHO_Oct26/lookupTables/mfur.lookuptable.txt",stringsAsFactors = F)
colnames(mfurt) <- c("Protein","Gene","Transcript")
mfurt$ProteinNo.1 <- gsub("\\.[0-9]","",mfurt$Protein)
ttrut <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoform_ttru_pvam_mluc/ttru/ttru.lookuptable.txt",stringsAsFactors = F)
colnames(ttrut) <- c("Protein","Gene","Transcript")
ttrut$ProteinNo.1 <- gsub("\\.[0-9]","",ttrut$Protein)
pvamt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoform_ttru_pvam_mluc/pvam/pvam.lookuptable.txt",stringsAsFactors = F)
colnames(pvamt) <- c("Protein","Gene","Transcript")
pvamt$ProteinNo.1 <- gsub("\\.[0-9]","",pvamt$Protein)
mluct <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoform_ttru_pvam_mluc/mluc/mluc.lookuptable.txt",stringsAsFactors = F)
colnames(mluct) <- c("Protein","Gene","Transcript")
mluct$ProteinNo.1 <- gsub("\\.[0-9]","",mluct$Protein)
# dont need umart, orost, lwedt lookuptables here, becuase protein and transcript have same name
# umart <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoforms_umar_oros/umar/umar.GeneID.ProteinID.allIsoforms.lookuptable.txt",fill = T)
# dim(umart)#  28987
# umart$ProteinNo.1 <- gsub("\\.[0-9]","",umart$Protein)
# # a few genes don't have protein IDs -- discard those.
# head(umart)
# colnames(umart) <- c("Gene","Protein")
# # seal:
# lwedt <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoforms_umar_oros/lwed/lwed.GeneID.ProteinID.allIsoforms.lookuptable.txt",fill=T)
# dim(lwedt)
# colnames(lwedt) <- c("Gene","Protein")
# lwedt$ProteinNo.1 <- gsub("\\.[0-9]","",lwedt$Protein)
#
# orost <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/proteinOrtho_20170517_newspp/longestIsoforms_umar_oros/oros/oros.GeneID.ProteinID.allIsoforms.lookuptable.txt",fill=T)
# dim(orost)
# colnames(orost) <- c("Gene","Protein")
# orost$ProteinNo.1 <- gsub("\\.[0-9]","",orost$Protein)
# don't have different transcript names so just
#head(orost)
## can combine each spp look up table into one big lookup table:
lookUpAll <- rbind(amelt,btaut,cfamt,ecabt,fcatt,hsapt,mfurt,ttrut,pvamt,mluct)
dim(lookUpAll)
# add to lookup table: if protein is NA, put in NA
head(lookUpAll)
lookUpAll2 <- rbind(lookUpAll,c(NA,NA,NA,NA)) # need to add this so it knows to put an NA where the TName is
########### protein:transcript ###############
#head(merge(poff1[,4:length(poff1)],amelt[,3:4],by.x=paste("amel",".faa",sep=""),by.y="ProteinNo.1"))
# this assumes lookup table is as above: protein, gene, transcript, proteinID with out .1 after it
# and skips the first four columns of all the one2one POrthoResults
# requires dplyr
library(dplyr) ### Dplyr and plyr are incompatible!!
GetTranscriptIDs <- function(spp,lookuptable,one2onePOrthos){
print(spp)
# merge spp transcript IDs in:
merged <- merge(one2onePOrthos,lookuptable[,3:4],by.x=paste(spp,".faa",sep=""),by.y="ProteinNo.1")
return(merged)
}
# dont need a sea otter  or giant otter look up table; just need to use otter names (all p/t/g have same name for otter) # same for lwed, umar, oros
animals <- c("amel","btau","cfam","ecab","fcat","hsap","mfur","ttru","pvam","mluc")
t1 <- portho_EP_8[,4:length(portho_EP_8)]
library(data.table) # requires this library for setnames
for(animal in animals){
t1 <- GetTranscriptIDs(animal,lookUpAll2,t1)
setnames(t1,old="Transcript",new=paste(animal,"_T",sep=""))
}
###### worked!!! ### ####
head(t1)
dim(t1) # 15318 19 , should be 15318
# want to keep the out elut.faa (sea otter) and pbra.faa (giant otter) umar, oros, lwed.faa columns, and all the _T cols:
# want to add a prefix to every lwed, oros, umar entry so that they can be distinguished later. # don't do this for the na entries
na.omit(t1$oros.faa) <- paste("LWED",na.omit(t1$oros.faa),sep="_")
?na.omit
??na.omit
t1$oros.faa <- paste("LWED",t1$oros.faa,sep="_")
head(t1)
t1$lwed.faa <- paste("LWED",t1$lwed.faa,sep="_")
head(t1)
t1$umar.faa <- paste("UMAR",t1$umar.faa,sep="_")
head(t1)
tt <- t1[,(sppNum-4):length(t1)] ## need to change the -4 depending on # of species!
tt <- subset(tt, select=-c(na_count,remainingSpp,PName))
head(tt) ### make sure this has all the species!
ttdf <- t(as.data.frame(tt,stringsAsFactors = F))
dim(ttdf)
dim(tt)
ttdf[,1:10]
dim(ttdf) # 12 9309
colnames(ttdf) <- c(seq(1:dim(ttdf)[2]))
ttdf[,1:10]
write.table(ttdf,"15spp_POrtho_LongestIsosSelected_pruneTree_20170601/one2one_orthologClusters_wideFormat_15spp.includesNAs.20170606.txt",col.names = F, quote = F,row.names=F)
t1$oros.faa <- paste("OROS",t1$oros.faa,sep="_")
head(t1)
t1$lwed.faa <- paste("LWED",t1$lwed.faa,sep="_")
head(t1)
t1$umar.faa <- paste("UMAR",t1$umar.faa,sep="_")
head(t1)
tt <- t1[,(sppNum-4):length(t1)] ## need to change the -4 depending on # of species!
tt <- subset(tt, select=-c(na_count,remainingSpp,PName))
head(tt) ### make sure this has all the species!
ttdf <- t(as.data.frame(tt,stringsAsFactors = F))
ttdf[,1:10]
dim(ttdf) # 12 9309
colnames(ttdf) <- c(seq(1:dim(ttdf)[2]))
ttdf[,1:10]
write.table(ttdf,"15spp_POrtho_LongestIsosSelected_pruneTree_20170601/one2one_orthologClusters_wideFormat_15spp.includesNAs.20170606.txt",col.names = F, quote = F,row.names=F)
t1 <- portho_EP_8[,4:length(portho_EP_8)]
library(data.table) # requires this library for setnames
for(animal in animals){
t1 <- GetTranscriptIDs(animal,lookUpAll2,t1)
setnames(t1,old="Transcript",new=paste(animal,"_T",sep=""))
}
head(t1)
dim(t1) # 15318 19 , should be 15318
t1$oros.faa <- paste("OROS",t1$oros.faa,sep="_")
head(t1)
t1$lwed.faa <- paste("LWED",t1$lwed.faa,sep="_")
head(t1)
t1$umar.faa <- paste("UMAR",t1$umar.faa,sep="_")
head(t1)
tt <- t1[,(sppNum-4):length(t1)] ## need to change the -4 depending on # of species!
tt <- subset(tt, select=-c(na_count,remainingSpp,PName))
head(tt) ### make sure this has all the species!
ttdf <- t(as.data.frame(tt,stringsAsFactors = F))
ttdf[,1:10]
dim(ttdf) # 12 9309
colnames(ttdf) <- c(seq(1:dim(ttdf)[2]))
ttdf[,1:10]
write.table(ttdf,"15spp_POrtho_LongestIsosSelected_pruneTree_20170601/one2one_orthologClusters_wideFormat_15spp.includesNAs.20170606.txt",col.names = F, quote = F,row.names=F)
pseudo <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/pseudoPipe_20170307/pseudoPipeResults/pseudoPipe_elut_elutPep/enhydra_lutris_ppipe_elutPep.allPgenes.20170321.txt",header=T)
dim(pseudo)
pseudo <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/pseudoPipe_20170307/pseudoPipeResults/pseudoPipe_elut_elutPep/enhydra_lutris_ppipe_elutPep.allPgenes.20170321.txt",header=T,quote="")
dim(pseudo)
tail(pseudo)
pseudo <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/pseudoPipe_20170307/pseudoPipeResults/pseudoPipe_elut_elutPep/enhydra_lutris_ppipe_elutPep.allPgenes.20170321.txt",header=T,quote="",comment="")
dim(pseudo)
head(pseudo)
unique(pseudo$type)
allElutGenes_fullInfo <- read.table("/Users/annabelbeichman/Documents/UCLA/Otters/GidgetDeNovoGenome/Annotation/MakerRound5_blast1e-06_USETHIS_Nov11/FULLINFO_GradedGeneSets_Nov17/mRNA_FullInfo_withGrades.Nov17.txt",sep=";",header=T,quote="",comment.char="")
allElutGenes_fullInfo$jbrowse <- paste(allElutGenes_fullInfo$scaffold,":",allElutGenes_fullInfo$start,"-",allElutGenes_fullInfo$stop,sep="")
library(stringr)
head(allElutGenes_fullInfo)
int1e <- str_split_fixed(allElutGenes_fullInfo$blastInfo,":",2)
head(int1e)
allElutGenes_fullInfo$similarToSymbol <- str_split_fixed(int1e[,1],"to ",2)[,2]
allElutGenes_fullInfo$similarToSymbol
head(int1e)
head(allElutGenes_fullInfo)
head(pseudo)
head(allElutGenes_fullInfo)
pseudo_info <- merge(pseduo,allElutGenes_fullInfo,by.x="query",by.y="name")
pseudo_info <- merge(pseudo,allElutGenes_fullInfo,by.x="query",by.y="name")
head(pseudo_info)
View(pseudo_info[pseudo_info$type=="PSDD",])
View(pseudo_info[pseudo_info$type=="PSSD",])
unique(pseudo_info[pseudo_info$type=="PSSD",]$similarToSymbol)
require(ape)
tr <- read.tree("((((((5_elut, 9_pbra) 15 , 8_mfur) 14 , 1_amel) 13 , 3_cfam) 12 , 6_fcat) 11 , (4_ecab, 2_btau) 16 , 7_hsap) 10 ;")
tr <- ("((((((5_elut, 9_pbra) 15 , 8_mfur) 14 , 1_amel) 13 , 3_cfam) 12 , 6_fcat) 11 , (4_ecab, 2_btau) 16 , 7_hsap) 10 ;")
cat(cat("((((((5_elut, 9_pbra) 15 , 8_mfur) 14 , 1_amel) 13 , 3_cfam) 12 , 6_fcat) 11 , (4_ecab, 2_btau) 16 , 7_hsap) 10 ;", file = "ex.tre", sep = "\n"))
cat("((((((5_elut, 9_pbra) 15 , 8_mfur) 14 , 1_amel) 13 , 3_cfam) 12 , 6_fcat) 11 , (4_ecab, 2_btau) 16 , 7_hsap) 10 ;", file = "ex.tre", sep = "\n"))
cat("((((((5_elut, 9_pbra) 15 , 8_mfur) 14 , 1_amel) 13 , 3_cfam) 12 , 6_fcat) 11 , (4_ecab, 2_btau) 16 , 7_hsap) 10 ;", file = "ex.tre", sep = "\n")
tr <- read.tree("ex.tre")
str(tr)
tr$node.label
tr$tip.label
tr$edge
edgelabels(tr)
edgelabels
tr.edgelabels()
tr$edge
tr$edge
tr$edge
edges <- tr$edge
tr$tip.label
tr$Nnode
tr$node.label
summary(tr)
tr$edge
which.edge(tr,tr$tip.label)
tr$tip.label
which.edge(tr,"1_amel")
tr$edge[9]
which.edge(tr,c("1_amel","8_mfur"))
which.edge(tr,c("1_amel","8_mfur"))
tr$edge[c(4,8,9)]
tr$edge
?system.file
require(geiger)
RVersion()
?version
R.Version()
source("https://bioconductor.org/biocLite.R")
biocLite("treeio")
require(treeio)
require(ape)
require(geiger)
install.packages("geiger")
brst <- read.paml_rst("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/CompGenomicsScripts/sandboxPruneTrees/rst")
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
brst <- read.paml_rst("/Users/annabelbeichman/Documents/UCLA/Otters/ComparativeGenomics/CompGenomicsScripts/sandboxPruneTrees/rst")
tree <- get.tree(brst)
tipIDs <- as.data.frame(tree$tip.label)
summary(tree)
tipIDs <- as.data.frame(tree$tip.label)
tipIDs$tipNum <- rownames(tipIDs) # each tip gets a number (alphabetical bc fasta was sorted)
nodeIDs <- data.frame(tree$node.label,stringsAsFactors=F)
nodeIDs$tips <- sapply(as.integer(nodeIDs$tree.node.label),tips,phy=tree)
require(geiger)
nodeIDs$tips <- sapply(as.integer(nodeIDs$tree.node.label),tips,phy=tree)
head(nodeIDs)
head(tipIDs)
colnames(nodeIDs) <- c("num","tips")
colnames(tipIDs) <- c("tips","num")
tipIDs$tips <- as.list(as.character(tipIDs$tips)) # have to make labels a list type item for consistency
nodesAndTips <- rbind(tipIDs,nodeIDs)
nodesAndTips
tree$edges # gives you first part. 10 16 but want to get intersection of 10 and 16
trees$edge
trees$edges
tree$edges
tree$edge
edges <- data.frame(tree$edge)
colnames(edges) <- c("edge1","edge2")
head(edges)
nodesAndTips[nodesAndTips$num==edges$edge1,]
intersect(nodesAndTips[nodesAndTips$num==11]$tips,nodesAndTips[nodesAndTips$num==10]$tips)
intersect(nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
nodesAndTips
test <- as.list(c("la","boo","fa"))
test
test2 <- ["alpha","beta","gamma"]
test2 <- c("alpha","beta","gamma")
test2
as.list(test2)
test2[3]
test3 <- c("delta","alpha","gamma")
intersect(test3,test3)
intersect(test3,test2)
nodesAndTips[nodesAndTips$num==11,]$tips
nodesAndTips[nodesAndTips$num==10,]$tips
intersect(nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
intersect(as.list(nodesAndTips[nodesAndTips$num==11,]$tips),as.list(nodesAndTips[nodesAndTips$num==10,]$tips))
intersect(as.list(as.character(nodesAndTips[nodesAndTips$num==11,]$tips)),as.list(as.character(nodesAndTips[nodesAndTips$num==10,]$tips)))
type(nodesAndTips[nodesAndTips$num==11,]$tips)
typeof(nodesAndTips[nodesAndTips$num==11,]$tips)
intersect(nodesAndTips[nodesAndTips$num==11,]$tips[1],nodesAndTips[nodesAndTips$num==10,]$tips[1])
nodesAndTips[nodesAndTips$num==10,]$tips[1]
mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
nodesAndTips[nodesAndTips$num==11,]$tips
nodesAndTips[nodesAndTips$num==10,]$tips
lapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips)
as.list(mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips))
print(mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips),sep=",")
t(mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips),sep=",")
t(mapply(intersect,nodesAndTips[nodesAndTips$num==11,]$tips,nodesAndTips[nodesAndTips$num==10,]$tips))
edges$tips <- mapply(intersect,nodesAndTips[nodesAndTips$num==edges$edge1,]$tips,nodesAndTips[nodesAndTips$edge2==10,]$tips)
edges$edge1tips <- nodesAndTips[nodesAndTips==edges$edge1]$tips
nodesAndTips[nodesAndTips==edges$edge1]$tips
head(edges)
head(nodesAndTips)
merge(edges,nodesAndTips,by.x="edge1",by.y="num")
edges2 <- merge(edges,nodesAndTips,by.x="edge1",by.y="num")
colnames(edges2) <- c("edge1","edge2","edge1.tips")
edges3 <- merge(edges2,nodesAndTips,by.x="edge2",by.y="num")
head(edges3)
colnames(edges3) <- c("edge1","edge2","edge1.tips","edge2.tips")
head(edge3)
head(edges3)
edges3$intersection <- intersect(edges3$edge1.tips,edges3$edge2.tips)
intersect(edges3$edge1.tips,edges3$edge2.tips)
edges3$edge1.tips
head(edges3)
edges3$intersection <- mapply(intersect(edges3$edge1.tips,edges3$edge2.tips))
edges3$intersection <- mapply(intersect,edges3$edge1.tips,edges3$edge2.tips)
edges3
nodesAndEdges
nodesAndTips
edges[,c("edge1","edge2","edge2.tips","intersection"),]
edges[,c("edge1","edge2","edge2.tips","intersection")]
edges3[,c("edge1","edge2","edge2.tips","intersection")]
tree$edges
tree$edge
edges <- data.frame(tree$edge)
head(edges)
colnames(edges) <- c("edge1","edge2")
head(edges)
edges2 <- merge(edges,nodesAndTips,by.x="edge1",by.y="num")
head(edges2)
nodesAndTips
nodesAndTips
head(nodesAndTips)
colnames(edges) <- c("edge1","edge2")
merge(nodesAndTips,edges,by.x="num",by.y="edge2")
merged <- merge(edges,nodesAndTips,by.x="edge2",by.y="num")
merged
paste(merged$edge1,"..",merged$edge2," ",merged$tips)
paste(merged$edge1,"..",merged$edge2," ",merged$tips,quote=F)
paste(merged$edge1,"..",merged$edge2," ",merged$tips)
paste(merged$edge1,"..",merged$edge2," ",merged$tips,sep="")
write.table(paste(merged$edge1,"..",merged$edge2," ",merged$tips,sep=""),"test1.txt",quote=F)
write.table(paste(merged$edge1,"..",merged$edge2," ",as.character(merged$tips,sep="")),"test1.txt",quote=F)
write.table(paste(merged$edge1,"..",merged$edge2," ",as.character(merged$tips),sep=""),"test1.txt",quote=F)
as.character(merged$tips)
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
write.table(paste(merged$edge1,"..",merged$edge2," ",toString(merged$tips),sep=""),"test1.txt",quote=F)
toString(merged$tips)
mapply(toString,merged$tips)
write.table(paste(merged$edge1,"..",merged$edge2," ",mapply(toString,merged$tips),sep=""),"test1.txt",quote=F)
write.table(paste(merged$edge1,"..",merged$edge2," ",mapply(toString,merged$tips),sep=""),"test1.txt",quote=F,row.names=F,col.names = F)
